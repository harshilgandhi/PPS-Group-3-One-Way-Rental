How to use

1) Compile the simulator. Create your own folder (in the rental/)
   and place your group's code there. You MUST not insert code
   in the sim folder.

2) The command line arguments can be found in the Rental.java
   source file, just above the main function source code.
   You will find my initial versions of those files in the
   rental/ folder.


Guidelines

1) Extend the rental.sim.Player class as your basic
   player class. The simulator is going to call this
   class's methods and essentially will call the ones
   you will write in your derived class.

2) The first method called is the "place" method.
   Be sure that you save all information about the map
   etc in local variables. The simulator does not provide
   bookkeeping functions. You have to do all the bookkeeping
   yourselves by storing information in local variables and
   data structures.

3) The "place" method is called once. It gives you your cars'
   locations and where you can deposit them. You get to place
   your relocators in the nodes you want initially. Be careful
   to return the correct size of map and all the nodes to be
   valid positions in the map provided to you.

4) Your relocators have ids in the interval [0,R) and your cars
   in the [0,C) supposing we have R relocators and C cars per
   participating group. Your own player (and group) has an id
   defined at run time in the Player base class you are extending.

5) The game is repeated for a specific number of turns.
   In each turn the first function called is "offer".
   This returns an array of offers you make to others.
   Remember that your offers are implicit and do not put
   any constraints to what you can do.

6) After the simulator accumulates offers from all the players,
   it will give all of them back to you using the "request"
   function. (You also get your own offers back.) At this point
   you can use the "request" method of the "Offer" class to add
   requests to the offer. But you cannot see requests of others
   at this point. You will be able when this phase is over.

7) When all the players submit their offers, the "verify" function
   is called for all players. This function has no arguments as it
   assumes you have saved the offer array in local variables from
   the previous "request" method call. At this point you can view
   all the requests of others in the offers using the "requests"
   method. You also can reply ONLY for your own offers using the
   "verify" method of the "Offer" class.

8) At this point your player is asked to provide an array of drives
   it is going to provide (I call it a "drive" when YOU provide a
   ride and "ride" when you are provided a ride by someone else.)
   You must not ask "rides" for your own relocators. You have to
   put them in the list of a "drive" and all information has to be
   correct. In a nutshell, you cannot play tricks to your own company.
   The simulator will match which rides have the pairing ticket in
   a "drive" and will perform these moves. If your "ride" is not provided
   by the other group, you will be able to see that in the next phase
   using the "executed" method of the "Ride" class.

9) Keep in mind that you cannot post a ride for a person of your company
   that you move yourself with one of your cars. At this phase, it is a
   physical matching system and not an implicit messaging system as before.
   If you say you want to drive using relocator X as driver and also move
   your relocator Y using the same car, you cannot have X or Y in a separate
   location than the car. All these will trigger exceptions with diagnostic
   messages that will help figure out what mistake you made.


Disclaimer

1) You may find this API difficult to grasp at the start, but as your code
   and algorithms become more complicated, I am sure it will help you a lot.

2) The example dumb player is not as dumb as he looks. He implements a specific
   policy, so do not think the code in him will be easy to understand.
   You should be able to get started using this README, if you find it
   difficult to understand the simulator using the dumb player.

3) Please provide me with any bugs you may find in the code, either by
   inspection or by running your code doing something ridiculously simple
   that causes the simulator to misbehave.

4) Regularly check for updated version of the simulator. I am going to
   tremendously increase its performance over time, as it is going to be
   required in case we try larger maps in the tournament.


Have fun, :)
Orestis
